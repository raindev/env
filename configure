#!/usr/bin/env -S bash -i
set -euo pipefail

# returns 0 if the repository has been updated, 1 otherwise
update_repo () {
	current_commit=$(git rev-parse @)
	if ! git diff-index --quiet @; then
		git stash --quiet
		git pull --ff-only --quiet
		git stash pop --quiet
	else
		git pull --ff-only --quiet
	fi
	new_commit=$(git rev-parse @)
	if [ "$current_commit" = "$new_commit" ]; then
		return 1
	else
		return 0
	fi
}

pushd "$HOME/code/env/" > /dev/null
if update_repo; then
	echo -e 'Restarting updated script\n'
	exec "$HOME/code/env/configure"
fi
popd > /dev/null

if [[ $(hostname) == 'void' ]]; then
	echo 'Welcome to the void!'

	echo '>syncing the repositories and upgrading the system'
	xbps-install --sync --update
	echo '>installing packages'
	xargs < void-linux/packages xbps-install --yes
fi

if [[ "$OSTYPE" == linux* ]]; then
	echo 'Configuring Linux'

	if command -v dnf > /dev/null ; then
		echo '>upgrading DNF packages'
		sudo dnf upgrade
	fi
elif [[ "$OSTYPE" == darwin* ]]; then
	echo 'ï£¿ Thinking differently'

	echo -e "\n>installing updates"
	sudo softwareupdate --install --recommended

	if ! command -v brew > /dev/null ; then
		echo '>installing Homebrew'
		bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
		eval "$(/opt/homebrew/bin/brew shellenv)"
	fi

	echo '>upgrading packages'
	arch -arm64 brew upgrade
	echo '>installing packages'
	arch -arm64 brew bundle --no-lock --file=~/code/env/mac/Brewfile
else
	echo 'Unrecognized or unsupported system'
	exit 1
fi

if command -v rustup > /dev/null ; then
	echo '>upgrading Rust'
	rustup upgrade
fi

echo '>setting up dotfiles'
if [ ! -e "$HOME/code/dotfiles" ]; then
	git clone git@github.com:raindev/dotfiles.git \
		"$HOME/code/dotfiles"
	(cd "$HOME/code/dotfiles"; make all)
fi
pushd "$HOME/code/dotfiles/" > /dev/null
if update_repo; then
	make all
fi
popd > /dev/null
nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'

echo '>setting up scripts'
if [ ! -e "$HOME/code/scripts" ]; then
	git clone git@github.com:raindev/scripts.git \
		"$HOME/code/scripts"
fi
(cd "$HOME/code/scripts/" && (update_repo || true))

if ! gpg --list-key andrew@raindev.io > /dev/null; then
	echo '>setting up GPG'
	echo 'Insert the smartcard'
	read -r
	echo 'Fetch the public key'
	gpg --edit-card
	echo 'Set key trust level'
	gpg --edit-key andrew@raindev.io
fi

if [ ! -e "$HOME/.password-store" ]; then
	echo '>setting up pass'
	git clone git@github.com:raindev/passwords.git\
		"$HOME/.password-store"
	pass git init
fi
echo '>updating password store'
pass git pull --rebase --quiet
pass git push --quiet

echo '>ensuring symlinks exist'
[ -e "$HOME/org" ] || \
	ln -s "$HOME/notes/org" "$HOME/org"
[ -e "$HOME/cs" ] || \
	ln -s "$HOME/notes/cheatsheets" "$HOME/cs"

echo -e "\nAll done. Enjoy your $(date +%A)!"
